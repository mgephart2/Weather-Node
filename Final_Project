//package design.weatherstationmngt;

//import java.beans.Statement;
import java.sql.Statement;
import java.sql.*;
import java.util.Random;

public class WeatherStation {
    private Sensor temperatureSensor;
    private Sensor humiditySensor;
    private Sensor windSpeedSensor;
    

    public WeatherStation() {
        this.temperatureSensor = new TemperatureSensor();
        this.humiditySensor = new HumiditySensor();
        this.windSpeedSensor = new WindSpeedSensor();
    }
    

    public WeatherData getWeatherData() {
        double temperature = temperatureSensor.readValue();
        double humidity = humiditySensor.readValue();
        double windSpeed = windSpeedSensor.readValue();
        WeatherData weatherData = new WeatherData(temperature, humidity, windSpeed);
        return weatherData;
    }

    public void simulateWeatherData() {
        //Random random = new Random();
        double i = 0;
        while (true) {
            double sinTemp = 10 * Math.sin((i-2)*1/6) + 32;
            double sinHumi = 50 * Math.abs(Math.sin(i/30)) + 25;
            double sinWind = 10 * Math.sin((i-2)*1/6) + 12;

            /*double temperature = random.nextDouble() * 95;
            double humidity = random.nextDouble() * 100;
            double windSpeed = random.nextDouble() * 50;*/
            WeatherData weatherData = new WeatherData(sinTemp, sinHumi, sinWind);
            System.out.println(weatherData.toString());
            try {
                Thread.sleep(500); // wait for 5 seconds
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            i = i + .1;
        }
    }
    

    public static void main(String[] args) {
        WeatherStation weatherStation = new WeatherStation();
        weatherStation.simulateWeatherData();
    }
}

interface Sensor {
    double readValue();
}

class TemperatureSensor implements Sensor {
    @Override
    public double readValue() {
        // code to read temperature sensor value
        return 0.0;
    }
}

class HumiditySensor implements Sensor {
    @Override
    public double readValue() {
        // code to read humidity sensor value
        return 0.0;
    }
}

class WindSpeedSensor implements Sensor {
    @Override
    public double readValue() {
        // code to read wind speed sensor value
        return 0.0;
    }
}

class WeatherData {
    private double temperature;
    private double humidity;
    private double windSpeed;

    public WeatherData(double temperature, double humidity, double windSpeed) {
        this.temperature = temperature;
        this.humidity = humidity;
        this.windSpeed = windSpeed;
    }
    

    public double getTemperature() {
        return temperature;
    }

    public void setTemperature(double temperature) {
        this.temperature = temperature;
    }

    public double getHumidity() {
        return humidity;
    }

    public void setHumidity(double humidity) {
        this.humidity = humidity;
    }

    public double getWindSpeed() {
        return windSpeed;
    }

    public void setWindSpeed(double windSpeed) {
        this.windSpeed = windSpeed;
    }

    @Override
    public String toString() {
        return "Temperature: " + Math.round(temperature) + "F, Humidity: " + Math.round(humidity) + "%, Wind Speed: " + Math.round(windSpeed) + "km/h";
    }
}
